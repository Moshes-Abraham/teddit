doctype html
html
  head
    title preferences - teddit
    include includes/head.pug
  body(class=""+ (user_preferences.theme === 'auto' ? 'dark' : user_preferences.theme) + "")
    include includes/topbar.pug
    .container
      .content
        h1 Preferences
        form(action="/saveprefs", method="POST")
          legend Display
          .setting
            label(for="theme") Theme: 
              select(id="theme", name="theme")
                if(!user_preferences.theme || user_preferences.theme == '')
                  option(value="auto") Auto
                  option(value="", selected="selected") White
                  option(value="dark") Dark
                  option(value="sepia") Sepia
                if(user_preferences.theme === 'dark')
                  option(value="auto") Auto
                  option(value="") White
                  option(value="dark", selected="selected") Dark
                  option(value="sepia") Sepia
                if(user_preferences.theme === 'sepia')
                  option(value="auto") Auto
                  option(value="") White
                  option(value="dark") Dark
                  option(value="sepia", selected="selected") Sepia
                if(user_preferences.theme === 'auto')
                  option(value="auto", selected="selected") Auto
                  option(value="") White
                  option(value="dark") Dark
                  option(value="sepia") Sepia
          .setting
            label(for="flairs") Show flairs: 
              if(!user_preferences.flairs || user_preferences.flairs == 'true')
                input(type="checkbox", name="flairs", id="flairs", checked="checked")
              else
                input(type="checkbox", name="flairs", id="flairs")
          .setting
            label(for="highlight_controversial") Show a dagger (â€ ) on comments voted controversial: 
              if(!user_preferences.highlight_controversial || user_preferences.highlight_controversial == 'true')
                input(type="checkbox", name="highlight_controversial", id="highlight_controversial", checked="checked")
              else
                input(type="checkbox", name="highlight_controversial", id="highlight_controversial")
          .setting
            label(for="nsfw_enabled") Show NSFW content: 
              if (instance_config.nsfw_enabled === false && user_preferences.nsfw_enabled != 'true') || user_preferences.nsfw_enabled === 'false'
                input(type="checkbox", name="nsfw_enabled", id="nsfw_enabled")
              else
                input(type="checkbox", name="nsfw_enabled", id="nsfw_enabled", checked="checked")
          .setting
            label(for="post_media_max_height") Media size in posts: 
              select(id="post_media_max_height", name="post_media_max_height")
                -
                  let max_heights_html = ''
                  let user_key = user_preferences.post_media_max_height
                  if(!user_key || user_key == '')
                    user_key = 'medium'
                  
                  for(let key in instance_config.post_media_max_heights) {
                    if(instance_config.post_media_max_heights.hasOwnProperty(key))
                      max_heights_html += `<option value="${key}" ${(user_key == key ? "selected" : "")}>${key}</option>`
                  }
                != max_heights_html
          legend Subscribed subreddits
          .setting
            details
              summary
                span Show subscribed subreddits
              if user_preferences.subbed_subreddits && Array.isArray(user_preferences.subbed_subreddits)
                ul.subreddit-listing
                  each subreddit in user_preferences.subbed_subreddits
                    li
                      a(href="/unsubscribe/" + subreddit + "/?b=/preferences", class="sub-to-subreddit gray", title="subscriptions are saved in your browser's cookies") unsubscribe
                      a(href="/r/" + subreddit) #{subreddit}
              else
                small no subscribed subreddits
          small(class="notice") Preferences are stored client-side using cookies without any personal information.
          input(type="submit", value="Save preferences")
          a(href="/resetprefs", class="btn") Reset preferences
        form(action="/export_prefs", method="POST", id="export-form")
          if preferences_key
            details(open)
              summary
                span Export preferences
              .setting
                small By exporting your preferences you can transfer your subscribed subreddits and preferences to another device. Or you could create a bookmark if you tend to delete your cookies frequently.
                br
                label(for="export_saved") Export saved posts: 
                  input(type="checkbox", name="export_saved", id="export_saved")
                br
                input(type="submit", value="Export preferences")
                if preferences_key
                  - var protocol = 'http'
                  if instance_config.https_enabled === true
                    - var protocol = 'https'
                  p Visit this URL to import your preferences:
                  a(href=`${protocol}://${instance_config.domain}/import_prefs/${preferences_key}`) #{protocol}://#{instance_config.domain}/import_prefs/#{preferences_key}
          else
            details
              summary
                span Export preferences
              .setting
                small By exporting your preferences you can transfer your subscribed subreddits and preferences to another device. Or you could create a bookmark if you tend to delete your cookies frequently.
                br
                label(for="export_saved") Export saved posts: 
                  input(type="checkbox", name="export_saved", id="export_saved")
                br
                input(type="submit", value="Export preferences")
    include includes/footer.pug
